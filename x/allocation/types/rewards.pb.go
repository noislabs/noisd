// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nois/allocation/v1/rewards.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorReward defines the validator rewards structure.
type ValidatorReward struct {
	// validator address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// accumulated validator rewards
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards" yaml:"rewards"`
}

func (m *ValidatorReward) Reset()         { *m = ValidatorReward{} }
func (m *ValidatorReward) String() string { return proto.CompactTextString(m) }
func (*ValidatorReward) ProtoMessage()    {}
func (*ValidatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_592232d5033f97d1, []int{0}
}
func (m *ValidatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorReward.Merge(m, src)
}
func (m *ValidatorReward) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorReward proto.InternalMessageInfo

func (m *ValidatorReward) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorReward) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorReward)(nil), "nois.allocation.v1.ValidatorReward")
}

func init() { proto.RegisterFile("nois/allocation/v1/rewards.proto", fileDescriptor_592232d5033f97d1) }

var fileDescriptor_592232d5033f97d1 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x90, 0xa8, 0x08, 0x12, 0x48, 0x11, 0x43, 0xe9, 0xe0, 0x44, 0x99, 0x32, 0x14,
	0x5b, 0x81, 0x8d, 0x31, 0x48, 0x1c, 0x20, 0x03, 0x03, 0x9b, 0x13, 0x47, 0xc1, 0x22, 0xc9, 0xab,
	0xf2, 0x4c, 0x4a, 0x6f, 0xc1, 0x39, 0x38, 0x01, 0x47, 0xe8, 0xd8, 0x91, 0xa9, 0xa0, 0xe4, 0x06,
	0x9c, 0xa0, 0x8a, 0x93, 0xaa, 0x9d, 0xfc, 0xcb, 0xfe, 0xdf, 0xff, 0x3e, 0xff, 0xb6, 0x57, 0x81,
	0x42, 0x2e, 0x8a, 0x02, 0x52, 0xa1, 0x15, 0x54, 0xbc, 0x09, 0x79, 0x9d, 0x2d, 0x45, 0x2d, 0x91,
	0x2d, 0x6a, 0xd0, 0xe0, 0x38, 0xbd, 0x83, 0x1d, 0x1c, 0xac, 0x09, 0x67, 0x34, 0x05, 0x2c, 0x01,
	0x79, 0x22, 0x30, 0xe3, 0x4d, 0x98, 0x64, 0x5a, 0x84, 0x3c, 0x05, 0x55, 0x0d, 0x33, 0xb3, 0xeb,
	0x1c, 0x72, 0x30, 0x92, 0xf7, 0x6a, 0xb8, 0xf5, 0xbf, 0x89, 0x7d, 0xf5, 0x2c, 0x0a, 0x25, 0x85,
	0x86, 0x3a, 0x36, 0x4b, 0x9c, 0xb9, 0x3d, 0x11, 0x52, 0xd6, 0x19, 0xe2, 0x94, 0x78, 0x24, 0x38,
	0x8f, 0x9c, 0xff, 0xad, 0x7b, 0xb9, 0x12, 0x65, 0xf1, 0xe0, 0x8f, 0x0f, 0x7e, 0xbc, 0xb7, 0x38,
	0x4b, 0x7b, 0x32, 0xc2, 0x4d, 0x4f, 0xbc, 0xd3, 0xe0, 0xe2, 0xee, 0x86, 0x0d, 0x24, 0xac, 0x27,
	0x61, 0x23, 0x09, 0x7b, 0x04, 0x55, 0x45, 0xd1, 0x7a, 0xeb, 0x5a, 0x87, 0xb0, 0x71, 0xce, 0xff,
	0xfa, 0x75, 0x83, 0x5c, 0xe9, 0xd7, 0xf7, 0x84, 0xa5, 0x50, 0xf2, 0xf1, 0x23, 0xc3, 0x71, 0x8b,
	0xf2, 0x8d, 0xeb, 0xd5, 0x22, 0x43, 0x13, 0x81, 0xf1, 0x7e, 0x5b, 0xf4, 0xb4, 0x6e, 0x29, 0xd9,
	0xb4, 0x94, 0xfc, 0xb5, 0x94, 0x7c, 0x76, 0xd4, 0xda, 0x74, 0xd4, 0xfa, 0xe9, 0xa8, 0xf5, 0x32,
	0x3f, 0x0a, 0xeb, 0x9b, 0x2a, 0x44, 0x82, 0x46, 0x48, 0xfe, 0x71, 0xdc, 0xab, 0x89, 0x4d, 0xce,
	0x4c, 0x13, 0xf7, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x49, 0x4a, 0x40, 0x77, 0x01, 0x00,
	0x00,
}

func (m *ValidatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
